{
  "_args": [
    [
      {
        "raw": "watchman",
        "scope": null,
        "escapedName": "watchman",
        "name": "watchman",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/angela/Documents/AwesomeProject"
    ]
  ],
  "_from": "watchman@latest",
  "_id": "watchman@0.1.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/watchman",
  "_npmUser": {
    "name": "dfjones",
    "email": "doug@dfjones.net"
  },
  "_npmVersion": "1.1.63",
  "_phantomChildren": {},
  "_requested": {
    "raw": "watchman",
    "scope": null,
    "escapedName": "watchman",
    "name": "watchman",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/watchman/-/watchman-0.1.8.tgz",
  "_shasum": "78ae7e866205ed68f1bec59da6f672691710103e",
  "_shrinkwrap": null,
  "_spec": "watchman",
  "_where": "/Users/angela/Documents/AwesomeProject",
  "author": {
    "name": "Doug Jones",
    "email": "doug@dfjones.net"
  },
  "bin": {
    "watchman": "./watchman"
  },
  "bugs": {
    "url": "http://github.com/dfjones/watchman/issues"
  },
  "dependencies": {
    "cli": ">= 0.2.8",
    "eco": ">= 1.1.0-rc-3"
  },
  "description": "A simple utility to watch files/directories and perform an action when they change.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "78ae7e866205ed68f1bec59da6f672691710103e",
    "tarball": "https://registry.npmjs.org/watchman/-/watchman-0.1.8.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "http://github.com/dfjones/watchman",
  "keywords": [
    "file",
    "filesystem",
    "change",
    "command line"
  ],
  "maintainers": [
    {
      "name": "dfjones",
      "email": "doug@dfjones.net"
    }
  ],
  "name": "watchman",
  "optionalDependencies": {},
  "readme": "Watchman\n========\n\nSimple utility that watches files/directories for changes and performs an action when they change. Inspired (and partially based on) the coffee-script compiler.\n\nYes, I wrote it in coffee-script and NodeJS. Does that make me hip now?\n\n(Calm down, you don't need coffee-script to run it.)\n\nExamples:\n\n    ./watchman watchman \"ls -lah\"\n    Tue Apr 12 2011 23:06:42 - watching: watchman\n    Tue Apr 12 2011 23:06:51 - File changed: watchman\n    Tue Apr 12 2011 23:06:51 - Running action...\n    Tue Apr 12 2011 23:06:52 - stderr: \n    Tue Apr 12 2011 23:06:52 - stdout: total 80\n    drwxr-xr-x  10 doug  doug   340B Apr 12 23:06 .\n    drwxr-xr-x@ 26 doug  doug   884B Apr  7 22:17 ..\n    -rw-r--r--   1 doug  doug    12K Apr 12 23:06 .README.swp\n    drwxr-xr-x  15 doug  doug   510B Apr 12 23:06 .git\n    drwxrwxr-x   5 doug  doug   170B Apr 12 23:06 .vimbackup\n    -rw-r--r--   1 doug  doug    12K Apr 12 23:00 .watchman.coffee.swp\n    -rw-r--r--   1 doug  doug   497B Apr 12 23:06 README\n    drwxr-xr-x   7 doug  doug   238B Apr  3 13:14 test\n    -rwxr-xr-x   1 doug  doug   4.1K Apr 12 23:06 watchman\n    -rwxr-xr-x   1 doug  doug   2.6K Apr 12 23:00 watchman.coffee\n\n\nWorks with directories too!\n\n    ./watchman test \"echo 'hello world'\"\n    Tue Apr 12 2011 23:07:32 - watching directory: test\n    Tue Apr 12 2011 23:07:32 - watching: test/file2\n    Tue Apr 12 2011 23:07:32 - watching: test/bar\n    Tue Apr 12 2011 23:07:32 - watching: test/file3\n    Tue Apr 12 2011 23:07:32 - watching: test/foo\n    Tue Apr 12 2011 23:07:39 - File changed: test/foo\n    Tue Apr 12 2011 23:07:39 - Running action...\n    Tue Apr 12 2011 23:07:39 - stderr: \n    Tue Apr 12 2011 23:07:39 - stdout: hello world\n\nNot only that, but it will find new files in any watched directory!\n\n    ./watchman test \"echo 'hello world'\"\n    Tue Apr 12 2011 23:08:30 - watching directory: test\n    Tue Apr 12 2011 23:08:30 - watching: test/bar\n    Tue Apr 12 2011 23:08:30 - watching: test/file2\n    Tue Apr 12 2011 23:08:30 - watching: test/file3\n    Tue Apr 12 2011 23:08:30 - watching: test/foo\n\nLater after adding \"newFile\"...\n\n    Tue Apr 12 2011 23:08:36 - watching: test/newFile\n\nEven better, the action is an [eco](https://github.com/sstephenson/eco) template!\n\n    ./watchman test \"echo 'The file <%= @file %> changed!'\"\n    Thu Jan 03 2013 22:47:35 - watching directory: test\n    Thu Jan 03 2013 22:47:35 - watching: test/foo\n    Thu Jan 03 2013 22:48:17 - Running action...\n    Thu Jan 03 2013 22:48:17 - stderr: \n    Thu Jan 03 2013 22:48:17 - stdout: The file test/foo changed\n\nBy default, Watchman will perform the action immediately upon running. To prevent this, pass -w as an option.\n\nAbout Actions\n-------------\n\nThe action you specify will be exec'ed in a shell with the same working directory as watchman. The action string is actually a template\nfor [eco](https://github.com/sstephenson/eco). Currently, the context provided to the action template is simply:\n```\n{file: '/file/that/changed'}\n```\n\n\nInstall\n--------\n\n    npm install watchman\n",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/dfjones/watchman.git"
  },
  "version": "0.1.8"
}
